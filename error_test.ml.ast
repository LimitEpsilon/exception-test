[
  structure_item (error_test.ml[1,0+0]..[1,0+27])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (error_test.ml[1,0+0]..[1,0+27])
          pext_name = "ERROR"
          pext_kind =
            Pext_decl
              [
                core_type (error_test.ml[1,0+19]..[1,0+27])
                  Ptyp_constr "list" (error_test.ml[1,0+23]..[1,0+27])
                  [
                    core_type (error_test.ml[1,0+19]..[1,0+22])
                      Ptyp_constr "int" (error_test.ml[1,0+19]..[1,0+22])
                      []
                  ]
              ]
              None
  structure_item (error_test.ml[2,28+0]..[2,28+26])
    Pstr_exception
    type_exception
      ptyext_constructor =
        extension_constructor (error_test.ml[2,28+0]..[2,28+26])
          pext_name = "EXIT"
          pext_kind =
            Pext_decl
              [
                core_type (error_test.ml[2,28+18]..[2,28+26])
                  Ptyp_constr "list" (error_test.ml[2,28+22]..[2,28+26])
                  [
                    core_type (error_test.ml[2,28+18]..[2,28+21])
                      Ptyp_constr "int" (error_test.ml[2,28+18]..[2,28+21])
                      []
                  ]
              ]
              None
  structure_item (error_test.ml[3,55+0]..[3,55+31])
    Pstr_type Rec
    [
      type_declaration "color" (error_test.ml[3,55+5]..[3,55+10]) (error_test.ml[3,55+0]..[3,55+31])
        ptype_params =
          []
        ptype_cstrs =
          []
        ptype_kind =
          Ptype_variant
            [
              (error_test.ml[3,55+13]..[3,55+16])
                "RED" (error_test.ml[3,55+13]..[3,55+16])
                []
                None
              (error_test.ml[3,55+17]..[3,55+23])
                "BLUE" (error_test.ml[3,55+19]..[3,55+23])
                []
                None
              (error_test.ml[3,55+24]..[3,55+31])
                "GREEN" (error_test.ml[3,55+26]..[3,55+31])
                []
                None
            ]
        ptype_private = Public
        ptype_manifest =
          None
    ]
  structure_item (error_test.ml[4,87+0]..[4,87+14])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[4,87+4]..[4,87+7])
          Ppat_var "one" (error_test.ml[4,87+4]..[4,87+7])
        expression (error_test.ml[4,87+10]..[4,87+14])
          Pexp_variant "RED"
          None
    ]
  structure_item (error_test.ml[5,102+0]..[5,102+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[5,102+4]..[5,102+7])
          Ppat_var "two" (error_test.ml[5,102+4]..[5,102+7])
        expression (error_test.ml[5,102+10]..[5,102+15])
          Pexp_variant "BLUE"
          None
    ]
  structure_item (error_test.ml[6,120+0]..[8,164+39])
    Pstr_eval
    expression (error_test.ml[6,120+0]..[8,164+39])
      Pexp_let Nonrec
      [
        <def>
          pattern (error_test.ml[6,120+4]..[6,120+5])
            Ppat_var "f" (error_test.ml[6,120+4]..[6,120+5])
          expression (error_test.ml[6,120+6]..[6,120+18]) ghost
            Pexp_fun
            Nolabel
            None
            pattern (error_test.ml[6,120+6]..[6,120+7])
              Ppat_var "x" (error_test.ml[6,120+6]..[6,120+7])
            expression (error_test.ml[6,120+8]..[6,120+18]) ghost
              Pexp_fun
              Labelled "y"
              None
              pattern (error_test.ml[6,120+9]..[6,120+10])
                Ppat_var "y" (error_test.ml[6,120+9]..[6,120+10])
              expression (error_test.ml[6,120+13]..[6,120+18])
                Pexp_apply
                expression (error_test.ml[6,120+15]..[6,120+16])
                  Pexp_ident "-" (error_test.ml[6,120+15]..[6,120+16])
                [
                  <arg>
                  Nolabel
                    expression (error_test.ml[6,120+13]..[6,120+14])
                      Pexp_ident "x" (error_test.ml[6,120+13]..[6,120+14])
                  <arg>
                  Nolabel
                    expression (error_test.ml[6,120+17]..[6,120+18])
                      Pexp_ident "y" (error_test.ml[6,120+17]..[6,120+18])
                ]
      ]
      expression (error_test.ml[7,142+2]..[8,164+39])
        Pexp_let Nonrec
        [
          <def>
            pattern (error_test.ml[7,142+6]..[7,142+7])
              Ppat_var "g" (error_test.ml[7,142+6]..[7,142+7])
            expression (error_test.ml[7,142+10]..[7,142+18])
              Pexp_apply
              expression (error_test.ml[7,142+11]..[7,142+12])
                Pexp_ident "f" (error_test.ml[7,142+11]..[7,142+12])
              [
                <arg>
                Labelled "y"
                  expression (error_test.ml[7,142+16]..[7,142+17])
                    Pexp_constant PConst_int (3,None)
              ]
        ]
        expression (error_test.ml[8,164+4]..[8,164+39])
          Pexp_apply
          expression (error_test.ml[8,164+4]..[8,164+17])
            Pexp_ident "print_endline" (error_test.ml[8,164+4]..[8,164+17])
          [
            <arg>
            Nolabel
              expression (error_test.ml[8,164+18]..[8,164+39])
                Pexp_apply
                expression (error_test.ml[8,164+19]..[8,164+32])
                  Pexp_ident "string_of_int" (error_test.ml[8,164+19]..[8,164+32])
                [
                  <arg>
                  Nolabel
                    expression (error_test.ml[8,164+33]..[8,164+38])
                      Pexp_apply
                      expression (error_test.ml[8,164+34]..[8,164+35])
                        Pexp_ident "g" (error_test.ml[8,164+34]..[8,164+35])
                      [
                        <arg>
                        Nolabel
                          expression (error_test.ml[8,164+36]..[8,164+37])
                            Pexp_constant PConst_int (1,None)
                      ]
                ]
          ]
  structure_item (error_test.ml[9,206+0]..[9,206+53])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[9,206+4]..[9,206+5])
          Ppat_var "f" (error_test.ml[9,206+4]..[9,206+5])
        expression (error_test.ml[9,206+6]..[9,206+53]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (error_test.ml[9,206+6]..[9,206+7])
            Ppat_var "x" (error_test.ml[9,206+6]..[9,206+7])
          expression (error_test.ml[9,206+10]..[9,206+53])
            Pexp_for Up
            pattern (error_test.ml[9,206+14]..[9,206+15])
              Ppat_var "x" (error_test.ml[9,206+14]..[9,206+15])
            expression (error_test.ml[9,206+18]..[9,206+19])
              Pexp_constant PConst_int (1,None)
            expression (error_test.ml[9,206+23]..[9,206+25])
              Pexp_constant PConst_int (10,None)
            expression (error_test.ml[9,206+29]..[9,206+48])
              Pexp_apply
              expression (error_test.ml[9,206+29]..[9,206+42])
                Pexp_ident "print_endline" (error_test.ml[9,206+29]..[9,206+42])
              [
                <arg>
                Nolabel
                  expression (error_test.ml[9,206+43]..[9,206+48])
                    Pexp_constant PConst_string("foo",(error_test.ml[9,206+44]..[9,206+47]),None)
              ]
    ]
  structure_item (error_test.ml[10,262+0]..[12,367+47])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[10,262+4]..[10,262+5])
          Ppat_var "f" (error_test.ml[10,262+4]..[10,262+5])
        expression (error_test.ml[10,262+6]..[12,367+47]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (error_test.ml[10,262+6]..[10,262+15])
            Ppat_tuple
            [
              pattern (error_test.ml[10,262+7]..[10,262+8])
                Ppat_var "n" (error_test.ml[10,262+7]..[10,262+8])
              pattern (error_test.ml[10,262+10]..[10,262+11])
                Ppat_var "x" (error_test.ml[10,262+10]..[10,262+11])
              pattern (error_test.ml[10,262+13]..[10,262+14])
                Ppat_var "y" (error_test.ml[10,262+13]..[10,262+14])
            ]
          expression (error_test.ml[10,262+18]..[12,367+47])
            Pexp_ifthenelse
            expression (error_test.ml[10,262+21]..[10,262+26])
              Pexp_apply
              expression (error_test.ml[10,262+23]..[10,262+24])
                Pexp_ident "<" (error_test.ml[10,262+23]..[10,262+24])
              [
                <arg>
                Nolabel
                  expression (error_test.ml[10,262+21]..[10,262+22])
                    Pexp_ident "n" (error_test.ml[10,262+21]..[10,262+22])
                <arg>
                Nolabel
                  expression (error_test.ml[10,262+25]..[10,262+26])
                    Pexp_constant PConst_int (0,None)
              ]
            expression (error_test.ml[10,262+32]..[10,262+45])
              Pexp_apply
              expression (error_test.ml[10,262+32]..[10,262+37])
                Pexp_ident "raise" (error_test.ml[10,262+32]..[10,262+37])
              [
                <arg>
                Nolabel
                  expression (error_test.ml[10,262+38]..[10,262+45])
                    Pexp_apply
                    expression (error_test.ml[10,262+39]..[10,262+40])
                      Pexp_ident "x" (error_test.ml[10,262+39]..[10,262+40])
                    [
                      <arg>
                      Nolabel
                        expression (error_test.ml[10,262+41]..[10,262+44])
                          Pexp_construct "::" (error_test.ml[10,262+42]..[10,262+44]) ghost
                          Some
                            expression (error_test.ml[10,262+42]..[10,262+44]) ghost
                              Pexp_tuple
                              [
                                expression (error_test.ml[10,262+42]..[10,262+43])
                                  Pexp_ident "n" (error_test.ml[10,262+42]..[10,262+43])
                                expression (error_test.ml[10,262+43]..[10,262+44]) ghost
                                  Pexp_construct "[]" (error_test.ml[10,262+43]..[10,262+44]) ghost
                                  None
                              ]
                    ]
              ]
            Some
              expression (error_test.ml[11,308+32]..[12,367+47])
                Pexp_ifthenelse
                expression (error_test.ml[11,308+35]..[11,308+40])
                  Pexp_apply
                  expression (error_test.ml[11,308+37]..[11,308+38])
                    Pexp_ident "=" (error_test.ml[11,308+37]..[11,308+38])
                  [
                    <arg>
                    Nolabel
                      expression (error_test.ml[11,308+35]..[11,308+36])
                        Pexp_ident "n" (error_test.ml[11,308+35]..[11,308+36])
                    <arg>
                    Nolabel
                      expression (error_test.ml[11,308+39]..[11,308+40])
                        Pexp_constant PConst_int (0,None)
                  ]
                expression (error_test.ml[11,308+46]..[11,308+58])
                  Pexp_apply
                  expression (error_test.ml[11,308+46]..[11,308+51])
                    Pexp_ident "raise" (error_test.ml[11,308+46]..[11,308+51])
                  [
                    <arg>
                    Nolabel
                      expression (error_test.ml[11,308+52]..[11,308+58])
                        Pexp_apply
                        expression (error_test.ml[11,308+53]..[11,308+54])
                          Pexp_ident "y" (error_test.ml[11,308+53]..[11,308+54])
                        [
                          <arg>
                          Nolabel
                            expression (error_test.ml[11,308+55]..[11,308+57])
                              Pexp_construct "[]" (error_test.ml[11,308+55]..[11,308+57])
                              None
                        ]
                  ]
                Some
                  expression (error_test.ml[12,367+46]..[12,367+47])
                    Pexp_ident "n" (error_test.ml[12,367+46]..[12,367+47])
    ]
  structure_item (error_test.ml[13,415+0]..[17,540+16])
    Pstr_value Rec
    [
      <def>
        pattern (error_test.ml[13,415+8]..[13,415+9])
          Ppat_var "g" (error_test.ml[13,415+8]..[13,415+9])
        expression (error_test.ml[13,415+10]..[17,540+16]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (error_test.ml[13,415+10]..[13,415+11])
            Ppat_var "m" (error_test.ml[13,415+10]..[13,415+11])
          expression (error_test.ml[13,415+12]..[17,540+16]) ghost
            Pexp_fun
            Labelled "x"
            None
            pattern (error_test.ml[13,415+13]..[13,415+14])
              Ppat_var "x" (error_test.ml[13,415+13]..[13,415+14])
            expression (error_test.ml[13,415+15]..[17,540+16]) ghost
              Pexp_fun
              Nolabel
              None
              pattern (error_test.ml[13,415+15]..[13,415+16])
                Ppat_var "y" (error_test.ml[13,415+15]..[13,415+16])
              expression (error_test.ml[13,415+19]..[17,540+16])
                Pexp_try
                expression (error_test.ml[13,415+23]..[13,415+34])
                  Pexp_apply
                  expression (error_test.ml[13,415+23]..[13,415+24])
                    Pexp_ident "f" (error_test.ml[13,415+23]..[13,415+24])
                  [
                    <arg>
                    Nolabel
                      expression (error_test.ml[13,415+25]..[13,415+34])
                        Pexp_tuple
                        [
                          expression (error_test.ml[13,415+26]..[13,415+27])
                            Pexp_ident "m" (error_test.ml[13,415+26]..[13,415+27])
                          expression (error_test.ml[13,415+29]..[13,415+30])
                            Pexp_ident "x" (error_test.ml[13,415+29]..[13,415+30])
                          expression (error_test.ml[13,415+32]..[13,415+33])
                            Pexp_ident "y" (error_test.ml[13,415+32]..[13,415+33])
                        ]
                  ]
                [
                  <case>
                    pattern (error_test.ml[14,455+4]..[14,455+13])
                      Ppat_construct "ERROR" (error_test.ml[14,455+4]..[14,455+9])
                      Some
                        []
                        pattern (error_test.ml[14,455+10]..[14,455+13])
                          Ppat_construct "::" (error_test.ml[14,455+11]..[14,455+13]) ghost
                          Some
                            []
                            pattern (error_test.ml[14,455+11]..[14,455+13]) ghost
                              Ppat_tuple
                              [
                                pattern (error_test.ml[14,455+11]..[14,455+12])
                                  Ppat_var "a" (error_test.ml[14,455+11]..[14,455+12])
                                pattern (error_test.ml[14,455+12]..[14,455+13]) ghost
                                  Ppat_construct "[]" (error_test.ml[14,455+12]..[14,455+13]) ghost
                                  None
                              ]
                    expression (error_test.ml[14,455+17]..[14,455+33])
                      Pexp_apply
                      expression (error_test.ml[14,455+17]..[14,455+18])
                        Pexp_ident "g" (error_test.ml[14,455+17]..[14,455+18])
                      [
                        <arg>
                        Nolabel
                          expression (error_test.ml[14,455+19]..[14,455+26])
                            Pexp_apply
                            expression (error_test.ml[14,455+22]..[14,455+23])
                              Pexp_ident "+" (error_test.ml[14,455+22]..[14,455+23])
                            [
                              <arg>
                              Nolabel
                                expression (error_test.ml[14,455+20]..[14,455+21])
                                  Pexp_ident "a" (error_test.ml[14,455+20]..[14,455+21])
                              <arg>
                              Nolabel
                                expression (error_test.ml[14,455+24]..[14,455+25])
                                  Pexp_constant PConst_int (1,None)
                            ]
                        <arg>
                        Labelled "x"
                          expression (error_test.ml[14,455+30]..[14,455+31])
                            Pexp_ident "y" (error_test.ml[14,455+30]..[14,455+31])
                        <arg>
                        Nolabel
                          expression (error_test.ml[14,455+32]..[14,455+33])
                            Pexp_ident "x" (error_test.ml[14,455+32]..[14,455+33])
                      ]
                  <case>
                    pattern (error_test.ml[15,489+4]..[15,489+12])
                      Ppat_construct "EXIT" (error_test.ml[15,489+4]..[15,489+8])
                      Some
                        []
                        pattern (error_test.ml[15,489+9]..[15,489+12])
                          Ppat_construct "::" (error_test.ml[15,489+10]..[15,489+12]) ghost
                          Some
                            []
                            pattern (error_test.ml[15,489+10]..[15,489+12]) ghost
                              Ppat_tuple
                              [
                                pattern (error_test.ml[15,489+10]..[15,489+11])
                                  Ppat_var "a" (error_test.ml[15,489+10]..[15,489+11])
                                pattern (error_test.ml[15,489+11]..[15,489+12]) ghost
                                  Ppat_construct "[]" (error_test.ml[15,489+11]..[15,489+12]) ghost
                                  None
                              ]
                    expression (error_test.ml[15,489+16]..[15,489+32])
                      Pexp_apply
                      expression (error_test.ml[15,489+16]..[15,489+17])
                        Pexp_ident "g" (error_test.ml[15,489+16]..[15,489+17])
                      [
                        <arg>
                        Nolabel
                          expression (error_test.ml[15,489+18]..[15,489+25])
                            Pexp_apply
                            expression (error_test.ml[15,489+21]..[15,489+22])
                              Pexp_ident "+" (error_test.ml[15,489+21]..[15,489+22])
                            [
                              <arg>
                              Nolabel
                                expression (error_test.ml[15,489+19]..[15,489+20])
                                  Pexp_ident "a" (error_test.ml[15,489+19]..[15,489+20])
                              <arg>
                              Nolabel
                                expression (error_test.ml[15,489+23]..[15,489+24])
                                  Pexp_constant PConst_int (1,None)
                            ]
                        <arg>
                        Nolabel
                          expression (error_test.ml[15,489+26]..[15,489+27])
                            Pexp_ident "y" (error_test.ml[15,489+26]..[15,489+27])
                        <arg>
                        Labelled "x"
                          expression (error_test.ml[15,489+31]..[15,489+32])
                            Pexp_ident "x" (error_test.ml[15,489+31]..[15,489+32])
                      ]
                  <case>
                    pattern (error_test.ml[16,522+4]..[16,522+12])
                      Ppat_construct "ERROR" (error_test.ml[16,522+4]..[16,522+9])
                      Some
                        []
                        pattern (error_test.ml[16,522+10]..[16,522+12])
                          Ppat_construct "[]" (error_test.ml[16,522+10]..[16,522+12])
                          None
                    expression (error_test.ml[16,522+16]..[16,522+17])
                      Pexp_constant PConst_int (0,None)
                  <case>
                    pattern (error_test.ml[17,540+4]..[17,540+11])
                      Ppat_construct "EXIT" (error_test.ml[17,540+4]..[17,540+8])
                      Some
                        []
                        pattern (error_test.ml[17,540+9]..[17,540+11])
                          Ppat_construct "[]" (error_test.ml[17,540+9]..[17,540+11])
                          None
                    expression (error_test.ml[17,540+15]..[17,540+16])
                      Pexp_constant PConst_int (0,None)
                ]
    ]
  structure_item (error_test.ml[18,557+0]..[18,557+18])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[18,557+4]..[18,557+6])
          Ppat_var "e1" (error_test.ml[18,557+4]..[18,557+6])
        expression (error_test.ml[18,557+7]..[18,557+18]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (error_test.ml[18,557+7]..[18,557+8])
            Ppat_var "x" (error_test.ml[18,557+7]..[18,557+8])
          expression (error_test.ml[18,557+11]..[18,557+18])
            Pexp_construct "ERROR" (error_test.ml[18,557+11]..[18,557+16])
            Some
              expression (error_test.ml[18,557+17]..[18,557+18])
                Pexp_ident "x" (error_test.ml[18,557+17]..[18,557+18])
    ]
  structure_item (error_test.ml[19,576+0]..[19,576+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[19,576+4]..[19,576+6])
          Ppat_var "e2" (error_test.ml[19,576+4]..[19,576+6])
        expression (error_test.ml[19,576+7]..[19,576+17]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (error_test.ml[19,576+7]..[19,576+8])
            Ppat_var "x" (error_test.ml[19,576+7]..[19,576+8])
          expression (error_test.ml[19,576+11]..[19,576+17])
            Pexp_construct "EXIT" (error_test.ml[19,576+11]..[19,576+15])
            Some
              expression (error_test.ml[19,576+16]..[19,576+17])
                Pexp_ident "x" (error_test.ml[19,576+16]..[19,576+17])
    ]
  structure_item (error_test.ml[20,594+0]..[20,594+22])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[20,594+4]..[20,594+8])
          Ppat_var "main" (error_test.ml[20,594+4]..[20,594+8])
        expression (error_test.ml[20,594+9]..[20,594+22]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (error_test.ml[20,594+9]..[20,594+10])
            Ppat_var "c" (error_test.ml[20,594+9]..[20,594+10])
          expression (error_test.ml[20,594+13]..[20,594+22])
            Pexp_apply
            expression (error_test.ml[20,594+13]..[20,594+14])
              Pexp_ident "g" (error_test.ml[20,594+13]..[20,594+14])
            [
              <arg>
              Nolabel
                expression (error_test.ml[20,594+15]..[20,594+16])
                  Pexp_ident "c" (error_test.ml[20,594+15]..[20,594+16])
              <arg>
              Nolabel
                expression (error_test.ml[20,594+17]..[20,594+19])
                  Pexp_ident "e1" (error_test.ml[20,594+17]..[20,594+19])
              <arg>
              Nolabel
                expression (error_test.ml[20,594+20]..[20,594+22])
                  Pexp_ident "e2" (error_test.ml[20,594+20]..[20,594+22])
            ]
    ]
  structure_item (error_test.ml[21,617+0]..[21,617+17])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[21,617+4]..[21,617+5])
          Ppat_any
        expression (error_test.ml[21,617+8]..[21,617+17])
          Pexp_apply
          expression (error_test.ml[21,617+8]..[21,617+12])
            Pexp_ident "main" (error_test.ml[21,617+8]..[21,617+12])
          [
            <arg>
            Nolabel
              expression (error_test.ml[21,617+13]..[21,617+17])
                Pexp_constant PConst_int (-2,None)
          ]
    ]
  structure_item (error_test.ml[24,637+0]..[27,709+53])
    Pstr_value Rec
    [
      <def>
        pattern (error_test.ml[24,637+8]..[24,637+12])
          Ppat_var "fact" (error_test.ml[24,637+8]..[24,637+12])
        expression (error_test.ml[24,637+13]..[27,709+53]) ghost
          Pexp_fun
          Labelled "x"
          None
          pattern (error_test.ml[24,637+14]..[24,637+15])
            Ppat_var "x" (error_test.ml[24,637+14]..[24,637+15])
          expression (error_test.ml[25,655+2]..[27,709+53])
            Pexp_letexception
            extension_constructor (error_test.ml[25,655+16]..[25,655+20])
              pext_name = "ZERO"
              pext_kind =
                Pext_decl
                  []
                  None
            expression (error_test.ml[26,679+4]..[27,709+53])
              Pexp_ifthenelse
              expression (error_test.ml[26,679+7]..[26,679+13])
                Pexp_apply
                expression (error_test.ml[26,679+9]..[26,679+11])
                  Pexp_ident "<=" (error_test.ml[26,679+9]..[26,679+11])
                [
                  <arg>
                  Nolabel
                    expression (error_test.ml[26,679+7]..[26,679+8])
                      Pexp_ident "x" (error_test.ml[26,679+7]..[26,679+8])
                  <arg>
                  Nolabel
                    expression (error_test.ml[26,679+12]..[26,679+13])
                      Pexp_constant PConst_int (0,None)
                ]
              expression (error_test.ml[26,679+19]..[26,679+29])
                Pexp_apply
                expression (error_test.ml[26,679+19]..[26,679+24])
                  Pexp_ident "raise" (error_test.ml[26,679+19]..[26,679+24])
                [
                  <arg>
                  Nolabel
                    expression (error_test.ml[26,679+25]..[26,679+29])
                      Pexp_construct "ZERO" (error_test.ml[26,679+25]..[26,679+29])
                      None
                ]
              Some
                expression (error_test.ml[27,709+13]..[27,709+53])
                  Pexp_try
                  expression (error_test.ml[27,709+17]..[27,709+38])
                    Pexp_apply
                    expression (error_test.ml[27,709+19]..[27,709+20])
                      Pexp_ident "*" (error_test.ml[27,709+19]..[27,709+20])
                    [
                      <arg>
                      Nolabel
                        expression (error_test.ml[27,709+17]..[27,709+18])
                          Pexp_ident "x" (error_test.ml[27,709+17]..[27,709+18])
                      <arg>
                      Nolabel
                        expression (error_test.ml[27,709+21]..[27,709+38])
                          Pexp_apply
                          expression (error_test.ml[27,709+22]..[27,709+26])
                            Pexp_ident "fact" (error_test.ml[27,709+22]..[27,709+26])
                          [
                            <arg>
                            Labelled "x"
                              expression (error_test.ml[27,709+30]..[27,709+37])
                                Pexp_apply
                                expression (error_test.ml[27,709+33]..[27,709+34])
                                  Pexp_ident "-" (error_test.ml[27,709+33]..[27,709+34])
                                [
                                  <arg>
                                  Nolabel
                                    expression (error_test.ml[27,709+31]..[27,709+32])
                                      Pexp_ident "x" (error_test.ml[27,709+31]..[27,709+32])
                                  <arg>
                                  Nolabel
                                    expression (error_test.ml[27,709+35]..[27,709+36])
                                      Pexp_constant PConst_int (1,None)
                                ]
                          ]
                    ]
                  [
                    <case>
                      pattern (error_test.ml[27,709+44]..[27,709+48])
                        Ppat_construct "ZERO" (error_test.ml[27,709+44]..[27,709+48])
                        None
                      expression (error_test.ml[27,709+52]..[27,709+53])
                        Pexp_constant PConst_int (1,None)
                  ]
    ]
  structure_item (error_test.ml[29,764+0]..[29,764+48])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[29,764+4]..[29,764+5])
          Ppat_any
        expression (error_test.ml[29,764+8]..[29,764+48])
          Pexp_apply
          expression (error_test.ml[29,764+8]..[29,764+21])
            Pexp_ident "print_endline" (error_test.ml[29,764+8]..[29,764+21])
          [
            <arg>
            Nolabel
              expression (error_test.ml[29,764+22]..[29,764+48])
                Pexp_apply
                expression (error_test.ml[29,764+23]..[29,764+36])
                  Pexp_ident "string_of_int" (error_test.ml[29,764+23]..[29,764+36])
                [
                  <arg>
                  Nolabel
                    expression (error_test.ml[29,764+37]..[29,764+47])
                      Pexp_apply
                      expression (error_test.ml[29,764+38]..[29,764+42])
                        Pexp_ident "fact" (error_test.ml[29,764+38]..[29,764+42])
                      [
                        <arg>
                        Nolabel
                          expression (error_test.ml[29,764+43]..[29,764+46])
                            Pexp_constant PConst_int (1,None)
                      ]
                ]
          ]
    ]
  structure_item (error_test.ml[31,814+0]..[31,814+13])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[31,814+4]..[31,814+5])
          Ppat_var "a" (error_test.ml[31,814+4]..[31,814+5])
        expression (error_test.ml[31,814+8]..[31,814+13])
          Pexp_ident "raise" (error_test.ml[31,814+8]..[31,814+13])
    ]
  structure_item (error_test.ml[33,829+0]..[33,829+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[33,829+4]..[33,829+8])
          Ppat_var "|?" (error_test.ml[33,829+4]..[33,829+8])
        expression (error_test.ml[33,829+11]..[33,829+15])
          Pexp_ident "|>" (error_test.ml[33,829+11]..[33,829+15])
    ]
  structure_item (error_test.ml[34,845+0]..[34,845+12])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[34,845+4]..[34,845+6])
          Ppat_var "id" (error_test.ml[34,845+4]..[34,845+6])
        expression (error_test.ml[34,845+7]..[34,845+12]) ghost
          Pexp_fun
          Nolabel
          None
          pattern (error_test.ml[34,845+7]..[34,845+8])
            Ppat_var "x" (error_test.ml[34,845+7]..[34,845+8])
          expression (error_test.ml[34,845+11]..[34,845+12])
            Pexp_ident "x" (error_test.ml[34,845+11]..[34,845+12])
    ]
  structure_item (error_test.ml[35,858+0]..[35,858+15])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[35,858+4]..[35,858+5])
          Ppat_any
        expression (error_test.ml[35,858+8]..[35,858+15])
          Pexp_apply
          expression (error_test.ml[35,858+10]..[35,858+12])
            Pexp_ident "|?" (error_test.ml[35,858+10]..[35,858+12])
          [
            <arg>
            Nolabel
              expression (error_test.ml[35,858+8]..[35,858+9])
                Pexp_constant PConst_int (1,None)
            <arg>
            Nolabel
              expression (error_test.ml[35,858+13]..[35,858+15])
                Pexp_ident "id" (error_test.ml[35,858+13]..[35,858+15])
          ]
    ]
  structure_item (error_test.ml[36,874+0]..[36,874+28])
    Pstr_value Nonrec
    [
      <def>
        pattern (error_test.ml[36,874+4]..[36,874+5])
          Ppat_any
        expression (error_test.ml[36,874+8]..[36,874+28])
          Pexp_apply
          expression (error_test.ml[36,874+8]..[36,874+23])
            Pexp_ident "Pervasives.|>" (error_test.ml[36,874+8]..[36,874+23])
          [
            <arg>
            Nolabel
              expression (error_test.ml[36,874+24]..[36,874+25])
                Pexp_constant PConst_int (1,None)
            <arg>
            Nolabel
              expression (error_test.ml[36,874+26]..[36,874+28])
                Pexp_ident "id" (error_test.ml[36,874+26]..[36,874+28])
          ]
    ]
]

File "error_test.ml", line 20, characters 13-14:
20 | let main c = g c e1 e2
                  ^
Warning 6 [labels-omitted]: label x was omitted in the application of this function.
File "error_test.ml", line 29, characters 38-42:
29 | let _ = print_endline (string_of_int (fact (1)))
                                           ^^^^
Warning 6 [labels-omitted]: label x was omitted in the application of this function.
File "error_test.ml", line 36, characters 8-23:
36 | let _ = Pervasives.(|>) 1 id
             ^^^^^^^^^^^^^^^
Alert deprecated: module Stdlib.Pervasives
Use Stdlib instead.

If you need to stay compatible with OCaml < 4.07, you can use the 
stdlib-shims library: https://github.com/ocaml/stdlib-shims
